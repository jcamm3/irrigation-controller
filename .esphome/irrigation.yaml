#**************************************************************
#  PROJECT:            Irrigation Controller
#  DEVICE/BOARD:       LilyGO T-Relay / ESP32 (esp32dev)
#  VERSION:            1.4.1
#  AUTHOR:             John Camm
#  LAST UPDATED:       2025-07-21
#**************************************************************
#  DESCRIPTION
#    ESPHome-based 3-zone irrigation controller with schedule automation,
#    rain delay, manual cycle start, and a web-based interface. Includes
#    real-time countdown, runtime-adjustable durations, per-day schedule
#    filtering, zone highlighting, system monitoring, and water flow tracking.
#
#**************************************************************
#  CHANGELOG
#
#    [1.4.2] ‚Äì 2025-07-24
#      ‚Ä¢ Added seasonal adjustment (% runtime scaling)
#      ‚Ä¢ Forecast-based rain delay integration (via OWM)
#      ‚Ä¢ Logic updated to skip irrigation during rain delay
#      ‚Ä¢ Enhanced boot logging
#
#    [1.4.1] ‚Äì 2025-07-21
#      ‚Ä¢ Fixed logic bug in `on_boot:` to correctly sync total_gallons_used
#      ‚Ä¢ Added button to reset today's water usage (`reset_daily_usage`)
#      ‚Ä¢ Minor web UI refinements and log messages
#
#    [1.4.0] ‚Äì 2025-07-17
#      ‚Ä¢ Integrated pulse-based flow sensor on GPIO3
#      ‚Ä¢ Added real-time flow rate, daily and total water tracking
#      ‚Ä¢ Appended daily/total gallons to 'Irrigation Daily Summary'
#      ‚Ä¢ Added Home Assistant graphing sensors with state_class support
#
#    [1.3.0] ‚Äì 2025-06-25
#      ‚Ä¢ Added 'Irrigation Daily Summary' sensor with zone, schedule, rain delay,
#        and system health overview.
#      ‚Ä¢ Added connection status indicator and formatted uptime.
#      ‚Ä¢ Improved next scheduled event detection and script logging.
#      ‚Ä¢ Fixed scheduled cycle suppression reset at midnight.
#**************************************************************
# === ESPHome Core Configuration ===
substitutions:
  sensor_sen0550_multiplier: "0.1056688"
  sensor_sen0217_multiplier: "2.113376"

esphome:
  name: "irrigation"
  friendly_name: "irrigation"
  comment: Irrigation Controller (lilygo t-relay)
  on_boot:
    priority: -100
    then:
      - lambda: |-
          ESP_LOGI("setup", "Configured schedule times: S1=%02d:%02d S2=%02d:%02d S3=%02d:%02d",
            id(irrigation_s1t).hour, id(irrigation_s1t).minute,
            id(irrigation_s2t).hour, id(irrigation_s2t).minute,
            id(irrigation_s3t).hour, id(irrigation_s3t).minute
          );
          id(total_gallons_used) = id(water_total_gallons).state;
          ESP_LOGI("boot", "Synced lifetime water usage baseline: %.2f gal", id(total_gallons_used));

# === Hardware Details ===
# Configuring the ESP32 board and its framework.
esp32:
  board: esp32dev
  framework:
    type: arduino

# === Logging Configuration ===
# Enable logging to monitor the device's behavior.
logger:
  level: WARN

# === Remote Control and Updates ===
api:
  encryption:
    key: "5YOMxWYzYTTlXZ3V9OZYf67XMf7xby+XmQnX419UDt8=" # API encryption key for secure communication

# === Wi-Fi Configuration ===
# Setting up Wi-Fi connection details and a fallback hotspot.
ota:
  - platform: esphome  # Your existing OTA method
    password: "eeb7311a1c044291a3b8a2cdb0a5d71c" # OTA update password
#  - platform: web_server  # Add this for web-based OTA uploads

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "Irrigation Fallback Hotspot"
    password: "saintmoor"

# === Captive Portal ===
# For fallback access when not connected to Wi-Fi.
captive_portal:

# === Web Server ===
# Local web interface for monitoring and control.
web_server:
  version: 3
  auth:
    username: saintmoor
    password: saintmoor
  sorting_groups:
    - id: irrigation_status
      name: "üå± Irrigation Overview"
      sorting_weight: -55
    - id: irrigation_usage
      name: "üíß Water Usage"
      sorting_weight: -50
    - id: irrigation_control
      name: "üü¢ Manual Controls"
      sorting_weight: -45
    - id: irrigation_zones
      name: "üöø Zones"
      sorting_weight: -40
    - id: irrigation_duration
      name: "‚è±Ô∏è Run Duration"
      sorting_weight: -35
    - id: irrigation_times
      name: "üïí Schedules"
      sorting_weight: -30
    - id: irrigation_days
      name: "üìÖ Active Days"
      sorting_weight: -25
    - id: config_settings
      name: "‚öôÔ∏è System Info"
      sorting_weight: -10

globals:
  - id: irrigation_next_zone
    type: std::string
    restore_value: false
    initial_value: "\"none\""
  - id: manual_irrigation_active
    type: bool
    restore_value: false
    initial_value: "false"
  - id: scheduled_irrigation_disabled_today
    type: bool
    restore_value: false
    initial_value: "false"
  - id: active_zone_time_remaining
    type: int
    restore_value: no
    initial_value: '0'
  - id: scheduled_irrigation_active
    type: bool
    restore_value: false
    initial_value: "false"
  - id: irrigation_paused
    type: bool
    restore_value: false
    initial_value: "false"
  - id: total_gallons_used
    type: float
    restore_value: true
    initial_value: "0.0"
  - id: daily_gallons_used
    type: float
    restore_value: true
    initial_value: "0.0"

# set up time and check every minute (or second) for scheduled actions
# === Time Configuration ===
time:
  - platform: sntp
    id: sntp_time
    timezone: America/New_York
    servers:
     - 0.pool.ntp.org
     - 1.pool.ntp.org
     - 2.pool.ntp.org
    on_time:
      - seconds: 0
        minutes: 0
        hours: 0
        then:
          - lambda: |-
              ESP_LOGI("schedule", "Resetting canceled schedule flag at midnight.");
              id(scheduled_irrigation_disabled_today) = false;
    on_time_sync:
      then:
        - logger.log: "Synchronized system clock"
  - platform: homeassistant
    id: time_reset
    on_time:
      - seconds: 0
        minutes: 0
        hours: 0
        then:
          - lambda: |-
              id(daily_gallons_used) = 0.0;
          - component.update: water_today_gallons

# === Number ====
number:
  - platform: template
    id: seasonal_adjustment_factor
    name: "üìà Seasonal Adjustment"
    unit_of_measurement: "x"
    min_value: 0.5
    max_value: 1.5
    step: 0.05
    initial_value: 1.0
    mode: slider
    optimistic: true
    restore_value: true
    web_server:
      sorting_group_id: config_settings

# === Light ====
# Configure onboard LED as a status indicator.
light:
  - platform: status_led
    name: "Status LED"
    icon: "mdi:led-off"
    id: onboard_led
    restore_mode: ALWAYS_ON
    pin:
      number: 25
      mode: output
      inverted: true

sprinkler:
  - id: irrigation
    main_switch: "üöÄ Start Irrigation Cycle"
    auto_advance_switch: "Auto Advance"
    reverse_switch: "Reverse"
    valve_open_delay: 5s
    valves:
      - valve_switch: "üíß Zone 1"
        enable_switch: "üîÅ Enable Zone 1"
        valve_switch_id: irrigation_valve_sw1
        pump_switch_id: irrigation_pump_sw
        run_duration_number:
          id: zone_1_run_duration
          name: "Zone 1 Duration"
          icon: "mdi:timer-outline"
          initial_value: 60
          min_value: 1
          max_value: 240
          unit_of_measurement: min
          web_server:
            sorting_group_id: irrigation_duration
      - valve_switch: "üíß Zone 2"
        enable_switch: "üîÅ Enable Zone 2"
        valve_switch_id: irrigation_valve_sw2
        pump_switch_id: irrigation_pump_sw
        run_duration_number:
          id: zone_2_run_duration
          name: "Zone 2 Duration"
          icon: "mdi:timer-outline"
          initial_value: 60
          min_value: 1
          max_value: 240
          unit_of_measurement: min
          web_server:
            sorting_group_id: irrigation_duration
      - valve_switch: "üíß Zone 3"
        enable_switch: "üîÅ Enable Zone 3"
        valve_switch_id: irrigation_valve_sw3
        pump_switch_id: irrigation_pump_sw
        run_duration_number:
          id: zone_3_run_duration
          name: "Zone 3 Duration"
          icon: "mdi:timer-outline"
          initial_value: 60
          min_value: 1
          max_value: 240
          unit_of_measurement: min
          web_server:
            sorting_group_id: irrigation_duration

switch:
  - platform: gpio
    id: irrigation_pump_sw
    pin: GPIO21
    restore_mode: ALWAYS_OFF
    name: "üü¢ Pump Control"
    icon: "mdi:water-pump"
    web_server:
      sorting_group_id: irrigation_control
  - platform: gpio
    id: irrigation_valve_sw1
    pin: GPIO19
    restore_mode: ALWAYS_OFF
    name: "Zone 1 Valve"
    icon: "mdi:sprinkler"
    web_server:
      sorting_group_id: irrigation_zones
  - platform: gpio
    id: irrigation_valve_sw2
    pin: GPIO18
    restore_mode: ALWAYS_OFF
    name: "Zone 2 Valve"
    icon: "mdi:sprinkler"
    web_server:
      sorting_group_id: irrigation_zones
  - platform: gpio
    id: irrigation_valve_sw3
    pin: GPIO5
    restore_mode: ALWAYS_OFF
    name: "Zone 3 Valve"
    icon: "mdi:sprinkler"
    web_server:
      sorting_group_id: irrigation_zones
  # day of week toggle switches
  - platform: template
    id: irrigation_sunday
    name: "üìÖ Sunday"
    icon: "mdi:calendar-range"
    entity_category: config
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    web_server:
      sorting_group_id: irrigation_days
  - platform: template
    id: irrigation_monday
    name: "üìÖ Monday"
    icon: "mdi:calendar-range"
    entity_category: config
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    web_server:
      sorting_group_id: irrigation_days
  - platform: template
    id: irrigation_tuesday
    name: "üìÖ Tuesday"
    icon: "mdi:calendar-range"
    entity_category: config
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    web_server:
      sorting_group_id: irrigation_days
  - platform: template
    id: irrigation_wednesday
    name: "üìÖ Wednesday"
    icon: "mdi:calendar-range"
    entity_category: config
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    web_server:
      sorting_group_id: irrigation_days
  - platform: template
    id: irrigation_thursday
    name: "üìÖ Thursday"
    icon: "mdi:calendar-range"
    entity_category: config
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    web_server:
      sorting_group_id: irrigation_days
  - platform: template
    id: irrigation_friday
    name: "üìÖ Friday"
    icon: "mdi:calendar-range"
    entity_category: config
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    web_server:
      sorting_group_id: irrigation_days
  - platform: template
    id: irrigation_saturday
    name: "üìÖ Saturday"
    icon: "mdi:calendar-range"
    entity_category: config
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    web_server:
      sorting_group_id: irrigation_days
  # scheduled time enable switches
  - platform: template
    id: irrigation_schedule1_enabled
    name: "üïí Enable Schedule 1"
    icon: "mdi:clock-outline"
    entity_category: config
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    web_server:
      sorting_group_id: irrigation_times
  - platform: template
    id: irrigation_schedule2_enabled
    name: "üïí Enable Schedule 2"
    icon: "mdi:clock-outline"
    entity_category: config
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    web_server:
      sorting_group_id: irrigation_times
  - platform: template
    id: irrigation_schedule3_enabled
    name: "üïí Enable Schedule 3"
    icon: "mdi:clock-outline"
    entity_category: config
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    web_server:
      sorting_group_id: irrigation_times
# === Rain Delay Controls ===
  - platform: template
    id: irrigation_raindelay_24h_enabled
    name: "üåßÔ∏è Rain Delay 24h"
    icon: "mdi:weather-cloudy-clock"
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true
    turn_on_action:
      then:
        - delay: { hours: 24 }
        - switch.turn_off: irrigation_raindelay_24h_enabled
    web_server:
      sorting_group_id: irrigation_control
  - platform: template
    id: irrigation_raindelay_48h_enabled
    name: "üåßÔ∏è Rain Delay 48h"
    icon: "mdi:weather-cloudy-clock"
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true
    turn_on_action:
      then:
        - delay: { hours: 48 }
        - switch.turn_off: irrigation_raindelay_48h_enabled
    web_server:
      sorting_group_id: irrigation_control
  - platform: template
    name: "Cancel Scheduled Cycle"
    id: cancel_scheduled_cycle
    icon: "mdi:calendar-remove"
    restore_mode: ALWAYS_OFF
    turn_on_action:
      - lambda: |-
          ESP_LOGI("schedule", "Scheduled cycle canceled for today.");
          id(scheduled_irrigation_disabled_today) = true;
      - switch.turn_off: irrigation_valve_sw1
      - switch.turn_off: irrigation_valve_sw2
      - switch.turn_off: irrigation_valve_sw3
  - platform: template
    name: "Pause Irrigation"
    id: pause_irrigation
    icon: "mdi:pause-circle"
    restore_mode: ALWAYS_OFF
    turn_on_action:
      - lambda: |-
          id(irrigation_paused) = true;
          ESP_LOGI("irrigation", "Irrigation paused.");
      - switch.turn_off: irrigation_valve_sw1
      - switch.turn_off: irrigation_valve_sw2
      - switch.turn_off: irrigation_valve_sw3
    web_server:
      sorting_group_id: irrigation_control
  - platform: template
    name: "Resume Irrigation"
    id: resume_irrigation
    icon: "mdi:play-circle"
    restore_mode: ALWAYS_OFF
    turn_on_action:
      - lambda: |-
          id(irrigation_paused) = false;
          ESP_LOGI("irrigation", "Irrigation resumed.");
      - script.execute: resume_irrigation_logic
    web_server:
      sorting_group_id: irrigation_control
  - platform: restart
    icon: mdi:reload-alert
    name: "Restart" # Manual restart switch

button:
  - platform: template
    name: "Start Manual Cycle"
    id: irrigation_manual_cycle_btn
    icon: "mdi:play-circle"
    on_press:
      - lambda: |-
          id(manual_irrigation_active) = true;
      - script.execute: irrigation_script3
  - platform: template
    name: "Cancel Manual Cycle"
    id: manual_irrigation_cancel_btn
    icon: "mdi:cancel"
    on_press:
      - lambda: |-
          id(manual_irrigation_active) = false;
          ESP_LOGI("manual", "Manual irrigation cancelled.");
      - switch.turn_off: irrigation_valve_sw1
      - switch.turn_off: irrigation_valve_sw2
      - switch.turn_off: irrigation_valve_sw3
  - platform: template
    name: "Reset Water Usage Lifetime"
    id: reset_lifetime_usage
    icon: "mdi:play-circle"
    on_press:
      then:
        - lambda: |-
            id(total_gallons_used) = 0.0;
  - platform: template
    name: "Reset Today's Water Usage"
    id: reset_daily_usage
    icon: "mdi:play-circle"
    on_press:
      then:
        - lambda: |-
            id(daily_gallons_used) = 0.0;
        - component.update: water_today_gallons

datetime:
  - platform: template
    name: "Schedule 1 Start Time"
    entity_category: config
    id: irrigation_s1t
    icon: "mdi:clock"
    type: time
    optimistic: true
    restore_value: true
    web_server:
      sorting_group_id: irrigation_times
  - platform: template
    name: "Schedule 2 Start Time"
    entity_category: config
    id: irrigation_s2t
    icon: "mdi:clock"
    type: time
    optimistic: true
    restore_value: true
    web_server:
      sorting_group_id: irrigation_times
  - platform: template
    name: "Schedule 3 Start Time"
    entity_category: config
    id: irrigation_s3t
    icon: "mdi:clock"
    type: time
    optimistic: true
    restore_value: true
    web_server:
      sorting_group_id: irrigation_times

sensor:
  - platform: uptime
    name: "Uptime"
    id: uptime_s
    update_interval: 5s
  - platform: template
    name: "Active Zone Time Remaining"
    id: active_zone_time_remaining_sensor
    unit_of_measurement: "s"
    accuracy_decimals: 0
    update_interval: 1s
    internal: true
    lambda: |-
      return id(active_zone_time_remaining);
    icon: "mdi:clock-outline"
    web_server:
      sorting_group_id: irrigation_status
  - platform: pulse_meter
    pin: GPIO4
    name: "Water Flow Rate"
    id: water_flow_rate
    unit_of_measurement: "gal/min"
    timeout: 10s
    accuracy_decimals: 2
    total:
      name: "Total Gallons Used"
      id: water_total_gallons
      icon: "mdi:waves"
      unit_of_measurement: "gal"
      accuracy_decimals: 2
      device_class: water
      state_class: total_increasing
      web_server:
        sorting_group_id: irrigation_usage
    filters:
      - multiply: 0.1056688  # For SEN0550: (60 / 150) * 0.264172
    # - multiply: 2.113376  # For SEN0217: (60 / 7.5) * 0.264172
    web_server:
      sorting_group_id: irrigation_usage
  - platform: template
    name: "Total Gallons Today"
    id: water_today_gallons
    icon: "mdi:waves"
    unit_of_measurement: "gal"
    accuracy_decimals: 2
    update_interval: 60s
    lambda: |-
      return id(daily_gallons_used);
    web_server:
      sorting_group_id: irrigation_usage

binary_sensor:
  - platform: template
    id: irrigation_running
    icon: "mdi:pulse"
    name: "Irrigation Running"
    lambda: |-
      return id(irrigation_valve_sw1).state ||
             id(irrigation_valve_sw2).state ||
             id(irrigation_valve_sw3).state;
  - platform: status
    name: "Connection Status"
    id: connection_status
    icon: "mdi:connection"
  - platform: template
    name: "Flow Active"
    id: flow_active
    icon: "mdi:pulse"
    lambda: |-
      return id(water_flow_rate).state > 0.1;
    device_class: running
    web_server:
      sorting_group_id: irrigation_status
  - platform: homeassistant
    name: "Rain Forecast Today"
    entity_id: binary_sensor.will_it_rain_today_owm
    id: rain_forecast_today
    web_server:
      sorting_group_id: irrigation_status
  
text_sensor:
  - platform: homeassistant
    name: "Weather Condition"
    entity_id: weather.home
    id: weather_condition
    web_server:
      sorting_group_id: irrigation_status
  - platform: template
    name: "Irrigation Daily Summary"
    id: irrigation_daily_summary
    icon: "mdi:calendar-today"
    lambda: |-
      auto now = id(sntp_time).now();
      if (!now.is_valid()) return {"Waiting for time sync..."};

      int dow = now.day_of_week;
      bool zone_enabled_today = false;

      switch (dow) {
        case 0: zone_enabled_today = id(irrigation_sunday).state; break;
        case 1: zone_enabled_today = id(irrigation_monday).state; break;
        case 2: zone_enabled_today = id(irrigation_tuesday).state; break;
        case 3: zone_enabled_today = id(irrigation_wednesday).state; break;
        case 4: zone_enabled_today = id(irrigation_thursday).state; break;
        case 5: zone_enabled_today = id(irrigation_friday).state; break;
        case 6: zone_enabled_today = id(irrigation_saturday).state; break;
      }

      bool rain24 = id(irrigation_raindelay_24h_enabled).state;
      bool rain48 = id(irrigation_raindelay_48h_enabled).state;
      bool rain = rain24 || rain48;

      std::string result = "Today: ";
      result += (zone_enabled_today ? "‚úÖ" : "‚ùå");
      result += " Zone 1, ";
      result += (zone_enabled_today ? "‚úÖ" : "‚ùå");
      result += " Zone 2, ";
      result += (zone_enabled_today ? "‚úÖ" : "‚ùå");
      result += " Zone 3\n";

      result += (rain ? "Rain Delay Active: ‚òî" : "No Rain Delay");
      result += "\n";

      if (id(irrigation_running).state) {
        result += "Now: Manual Cycle Running\n";
      } else {
        int min_delta = 1441;
        int next_hour = -1;
        int next_minute = -1;
        std::string next_label = "‚Äî";

        auto now_total = now.hour * 60 + now.minute;

        auto check_schedule = [&](bool enabled, int hour, int minute, const std::string& label) {
          if (!enabled || rain) return;
          int sched_total = hour * 60 + minute;
          int delta = sched_total >= now_total ? sched_total - now_total : 1440 - (now_total - sched_total);
          if (delta < min_delta) {
            min_delta = delta;
            next_hour = hour;
            next_minute = minute;
            next_label = label;
          }
        };

        check_schedule(id(irrigation_schedule1_enabled).state, id(irrigation_s1t).hour, id(irrigation_s1t).minute, "Zone 1");
        check_schedule(id(irrigation_schedule2_enabled).state, id(irrigation_s2t).hour, id(irrigation_s2t).minute, "Zone 2");
        check_schedule(id(irrigation_schedule3_enabled).state, id(irrigation_s3t).hour, id(irrigation_s3t).minute, "Zone 3");

        if (next_label != "‚Äî") {
          char buffer[64];
          snprintf(buffer, sizeof(buffer), "Next: %s at %02d:%02d", next_label.c_str(), next_hour, next_minute);
          result += buffer;
        } else {
          result += "Next: No Active Schedules";
        }
        result += "\n";
      }

      // Append water usage summary
      char water_buf[32];
      snprintf(water_buf, sizeof(water_buf), "Total Gallons Today: %.1f gal", id(daily_gallons_used));
      result += water_buf;
      result += "\n";

      char total_buf[32];
      snprintf(total_buf, sizeof(total_buf), "Total Gallons Used: %.1f gal", id(total_gallons_used));
      result += total_buf;
      result += "\n";

      // Append system health
      bool online = id(connection_status).state;
      uint32_t seconds = (uint32_t)id(uptime_s).state;
      uint32_t hrs = seconds / 3600;
      std::string health = online ? "üü¢ Online" : "üî¥ Offline";
      char uptime_buf[32];
      snprintf(uptime_buf, sizeof(uptime_buf), " | Uptime: %uh", hrs);

      result += "Health: " + health + std::string(uptime_buf);

      return result;
    update_interval: 30s
    web_server:
      sorting_group_id: irrigation_status
  - platform: template
    name: "Next Scheduled Event"
    icon: "mdi:calendar-clock"
    entity_category: diagnostic
    lambda: |-
      if (id(irrigation_running).state) {
        return std::string("Manual Mode Active");
      }
      auto now = id(sntp_time).now();
      if (!now.is_valid()) return {"Waiting for time sync..."};
      std::string result = "No Active Schedules";
      int min_minutes = 1441;
      int target_hour = 0;
      int target_minute = 0;
      std::string label;
      auto check_schedule = [&](bool enabled, int sched_hour, int sched_minute, const std::string& name) {
        if (!enabled) return;
        int now_total = now.hour * 60 + now.minute;
        int sched_total = sched_hour * 60 + sched_minute;
        int delta = sched_total >= now_total ? sched_total - now_total : 1440 - (now_total - sched_total);
        if (delta < min_minutes) {
          min_minutes = delta;
          target_hour = sched_hour;
          target_minute = sched_minute;
          label = name;
        }
      };
      check_schedule(id(irrigation_schedule1_enabled).state, id(irrigation_s1t).hour, id(irrigation_s1t).minute, "S1");
      check_schedule(id(irrigation_schedule2_enabled).state, id(irrigation_s2t).hour, id(irrigation_s2t).minute, "S2");
      check_schedule(id(irrigation_schedule3_enabled).state, id(irrigation_s3t).hour, id(irrigation_s3t).minute, "S3");
      if (min_minutes <= 1440) {
        char buffer[32];
        snprintf(buffer, sizeof(buffer), "Next: %s %02d:%02d", label.c_str(), target_hour, target_minute);
        return std::string(buffer);
      }
      return result;
    update_interval: 30s
    web_server:
      sorting_group_id: irrigation_status
  - platform: template
    name: "Next Irrigation Countdown"
    icon: "mdi:clock-start"
    entity_category: diagnostic
    lambda: |-
      if (id(irrigation_running).state) {
        return std::string("Manual Mode Active");
      }
      auto now = id(sntp_time).now();
      if (!now.is_valid()) return {"Waiting for time sync..."};
      int min_minutes = 1441;
      auto check_schedule = [&](bool enabled, int hour, int minute) {
        if (!enabled) return;
        int now_total = now.hour * 60 + now.minute;
        int sched_total = hour * 60 + minute;
        int delta = sched_total >= now_total ? sched_total - now_total : 1440 - (now_total - sched_total);
        if (delta < min_minutes) min_minutes = delta;
      };
      check_schedule(id(irrigation_schedule1_enabled).state, id(irrigation_s1t).hour, id(irrigation_s1t).minute);
      check_schedule(id(irrigation_schedule2_enabled).state, id(irrigation_s2t).hour, id(irrigation_s2t).minute);
      check_schedule(id(irrigation_schedule3_enabled).state, id(irrigation_s3t).hour, id(irrigation_s3t).minute);
      if (min_minutes <= 1440) {
        int hours = min_minutes / 60;
        int minutes = min_minutes % 60;
        char buffer[32];
        snprintf(buffer, sizeof(buffer), "Next in %dh %02dm", hours, minutes);
        return std::string(buffer);
      }
      return std::string("No Active Schedules");
    update_interval: 30s
    web_server:
      sorting_group_id: irrigation_status
  - platform: template
    name: "Rain Delay Status"
    lambda: |-
      if (id(irrigation_raindelay_24h_enabled).state)
        return {"24h Delay Active"};
      else if (id(irrigation_raindelay_48h_enabled).state)
        return {"48h Delay Active"};
      else
        return {"No Rain Delay"};
    update_interval: 30s
    icon: mdi:weather-pouring
    web_server:
      sorting_group_id: irrigation_status
  - platform: template
    name: "Current Active Zone"
    icon: "mdi:sprinkler-variant"
    lambda: |-
      if (!id(irrigation_running).state) {
        return std::string("None");
      }
      if (id(irrigation_valve_sw1).state) {
        return std::string("Zone 1");
      } else if (id(irrigation_valve_sw2).state) {
        return std::string("Zone 2");
      } else if (id(irrigation_valve_sw3).state) {
        return std::string("Zone 3");
      } else {
        return std::string("None");
      }
    update_interval: 1s
    web_server:
      sorting_group_id: irrigation_status
  - platform: template
    name: "Active Zone Time Remaining"
    id: active_zone_time_remaining_text
    icon: "mdi:clock-digital"
    lambda: |-
      int total = id(active_zone_time_remaining);
      if (total <= 0) return std::string("00:00");
      int min = total / 60;
      int sec = total % 60;
      char buffer[8];
      snprintf(buffer, sizeof(buffer), "%02d:%02d", min, sec);
      return std::string(buffer);
    update_interval: 1s
    web_server:
      sorting_group_id: irrigation_status
  - platform: template
    name: "Irrigation Status"
    id: irrigation_mode
    icon: "mdi:water-pump"
    lambda: |-
      if (id(irrigation_paused)) {
        return std::string("Paused");
      } else if (id(manual_irrigation_active)) {
        return std::string("Manual");
      } else if (id(scheduled_irrigation_active)) {
        return std::string("Scheduled");
      } else {
        return std::string("Idle");
      }
    update_interval: 1s
    web_server:
      sorting_group_id: irrigation_status
  - platform: template
    name: "Forecast Rain Delay"
    lambda: |-
      if (id(irrigation_raindelay_24h_enabled).state || id(irrigation_raindelay_48h_enabled).state)
        return {"‚òî Active"};
      return {"‚Äî"};
    update_interval: 30s
    icon: mdi:weather-pouring
    web_server:
      sorting_group_id: irrigation_status
  - platform: template
    name: "Uptime (formatted)"
    icon: "mdi:timer-outline"
    entity_category: diagnostic
    lambda: |-
      uint32_t dur = id(uptime_s).state;
      uint32_t dys = dur / 86400;
      dur %= 86400;
      uint32_t hrs = dur / 3600;
      dur %= 3600;
      uint32_t mnts = dur / 60;
      dur %= 60;
      char buffer[32];
      snprintf(buffer, sizeof(buffer), "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
      return {buffer};
    update_interval: 5s
  - platform: wifi_info
    ip_address:
      name: "IP Address"
      icon: "mdi:ip"
    ssid:
      name: "Connected SSID"
      icon: "mdi:wifi"
  - platform: version
    name: "ESPHome Version"
    hide_timestamp: true

script:
  - id: irrigation_script1
    then:
      lambda: |-
        int dow = id(sntp_time).now().day_of_week;
        if ((dow == 1 && id(irrigation_sunday).state)
         || (dow == 2 && id(irrigation_monday).state)
         || (dow == 3 && id(irrigation_tuesday).state)
         || (dow == 4 && id(irrigation_wednesday).state)
         || (dow == 5 && id(irrigation_thursday).state)
         || (dow == 6 && id(irrigation_friday).state)
         || (dow == 7 && id(irrigation_saturday).state)) {
          id(irrigation_script2).execute();
        }
  - id: irrigation_script2
    then:
      lambda: |-
        if (id(scheduled_irrigation_disabled_today)) {
          ESP_LOGI("schedule", "Schedule skipped ‚Äî disabled for today.");
          return;
        }
        int hour = id(sntp_time).now().hour;
        int minute = id(sntp_time).now().minute;
        if ((hour == id(irrigation_s1t).hour && minute == id(irrigation_s1t).minute && id(irrigation_schedule1_enabled).state && !id(irrigation_raindelay_24h_enabled).state && !id(irrigation_raindelay_48h_enabled).state && !id(rain_forecast_today).state)
         || (hour == id(irrigation_s2t).hour && minute == id(irrigation_s2t).minute && id(irrigation_schedule2_enabled).state && !id(irrigation_raindelay_24h_enabled).state && !id(irrigation_raindelay_48h_enabled).state && !id(rain_forecast_today).state)
         || (hour == id(irrigation_s3t).hour && minute == id(irrigation_s3t).minute && id(irrigation_schedule3_enabled).state && !id(irrigation_raindelay_24h_enabled).state && !id(irrigation_raindelay_48h_enabled).state && !id(rain_forecast_today).state)) {
          id(irrigation_script3).execute();
        }
  - id: irrigation_script3
    then:
      - lambda: |-
          if (!id(manual_irrigation_active)) {
            id(scheduled_irrigation_active) = true;
            id(manual_irrigation_active) = false;
            ESP_LOGI("schedule", "Starting scheduled full-cycle");
          } else {
            id(scheduled_irrigation_active) = false;
            ESP_LOGI("manual", "Starting manual full-cycle");
          }
      - script.execute: manual_zone1
  - id: resume_irrigation_logic
    then:
      - lambda: |-
          if (!id(manual_irrigation_active) && !id(scheduled_irrigation_active)) return;
          if (id(irrigation_valve_sw1).state || id(irrigation_valve_sw2).state || id(irrigation_valve_sw3).state) {
            ESP_LOGI("resume", "Resuming irrigation at current zone");
          } else {
            // Reopen the appropriate valve
            if (id(irrigation_next_zone) == "zone1") {
              id(active_zone_time_remaining) = (id(zone_1_run_duration).state * id(seasonal_adjustment_factor).state) * 60;
              id(irrigation_valve_sw1).turn_on();
            } else if (id(irrigation_next_zone) == "zone2") {
              id(active_zone_time_remaining) = (id(zone_2_run_duration).state * id(seasonal_adjustment_factor).state) * 60;
              id(irrigation_valve_sw2).turn_on();
            } else if (id(irrigation_next_zone) == "zone3") {
              id(active_zone_time_remaining) = (id(zone_3_run_duration).state * id(seasonal_adjustment_factor).state) * 60;
              id(irrigation_valve_sw3).turn_on();
            }
          }
  - id: manual_zone1
    then:
      - lambda: |-
          if (!id(manual_irrigation_active) && !id(scheduled_irrigation_active)) return;
          ESP_LOGI("irrigation", "Starting Zone 1");
          id(active_zone_time_remaining) = (id(zone_1_run_duration).state * id(seasonal_adjustment_factor).state) * 60;
          ESP_LOGI("countdown", "Zone 1 runtime = %d minutes (%d seconds)", (int)id(zone_1_run_duration).state, id(active_zone_time_remaining));
      - switch.turn_on: irrigation_valve_sw1
      - delay: !lambda "return (uint32_t)(id(zone_1_run_duration).state * 60000);"
      - switch.turn_off: irrigation_valve_sw1
      - lambda: |-
          ESP_LOGI("irrigation", "Irrigation cycle complete.");
      - script.execute: manual_zone2

  - id: manual_zone2
    then:
      - lambda: |-
          if (!id(manual_irrigation_active) && !id(scheduled_irrigation_active)) return;
          ESP_LOGI("irrigation", "Starting Zone 2");
          id(active_zone_time_remaining) = (id(zone_2_run_duration).state * id(seasonal_adjustment_factor).state) * 60;
          ESP_LOGI("countdown", "Zone 2 runtime = %d minutes (%d seconds)", (int)id(zone_2_run_duration).state, id(active_zone_time_remaining));
      - switch.turn_on: irrigation_valve_sw2
      - delay: !lambda "return (uint32_t)(id(zone_2_run_duration).state * 60000);"
      - switch.turn_off: irrigation_valve_sw2
      - lambda: |-
          ESP_LOGI("irrigation", "Irrigation cycle complete.");
      - script.execute: manual_zone3

  - id: manual_zone3
    then:
      - lambda: |-
          if (!id(manual_irrigation_active) && !id(scheduled_irrigation_active)) return;
          ESP_LOGI("irrigation", "Starting Zone 3");
          id(active_zone_time_remaining) = (id(zone_3_run_duration).state * id(seasonal_adjustment_factor).state) * 60;
          ESP_LOGI("countdown", "Zone 3 runtime = %d minutes (%d seconds)", (int)id(zone_3_run_duration).state, id(active_zone_time_remaining));
      - switch.turn_on: irrigation_valve_sw3
      - delay: !lambda "return (uint32_t)(id(zone_3_run_duration).state * 60000);"
      - switch.turn_off: irrigation_valve_sw3
      - lambda: |-
          id(active_zone_time_remaining) = 0;
          id(manual_irrigation_active) = false;
          id(scheduled_irrigation_active) = false;
          ESP_LOGI("irrigation", "Irrigation cycle complete.");

interval:
  - interval: 30s
    then:
      - lambda: |-
          auto now = id(sntp_time).now();
          if (!now.is_valid()) {
            id(irrigation_next_zone) = "none";
            return;
          }
          int min_minutes = 1441;
          std::string label = "none";
          auto check_schedule = [&](bool enabled, int hour, int minute, const std::string& zone) {
            if (!enabled) return;
            int now_total = now.hour * 60 + now.minute;
            int sched_total = hour * 60 + minute;
            int delta = sched_total >= now_total ? sched_total - now_total : 1440 - (now_total - sched_total);
            if (delta < min_minutes) {
              min_minutes = delta;
              label = zone;
            }
          };
          check_schedule(id(irrigation_schedule1_enabled).state, id(irrigation_s1t).hour, id(irrigation_s1t).minute, "zone1");
          check_schedule(id(irrigation_schedule2_enabled).state, id(irrigation_s2t).hour, id(irrigation_s2t).minute, "zone2");
          check_schedule(id(irrigation_schedule3_enabled).state, id(irrigation_s3t).hour, id(irrigation_s3t).minute, "zone3");

          id(irrigation_next_zone) = label;
  - interval: 5s
    then:
      - binary_sensor.template.publish:
          id: irrigation_running
          state: !lambda |-
            return id(irrigation_valve_sw1).state ||
                   id(irrigation_valve_sw2).state ||
                   id(irrigation_valve_sw3).state;
  - interval: 1s
    then:
      - if:
          condition:
            lambda: 'return id(active_zone_time_remaining) > 0 && !id(irrigation_paused);'
          then:
            - lambda: 'id(active_zone_time_remaining)--;'
  - interval: 60s
    then:
      - lambda: |-
          float lifetime = id(water_total_gallons).state;
          float delta = lifetime - id(total_gallons_used);
          if (delta > 0) {
            id(daily_gallons_used) += delta;
            id(total_gallons_used) = lifetime;
          }
      - component.update: water_today_gallons

